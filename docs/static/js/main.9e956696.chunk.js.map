{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","props","style","height","backgroundColor","marginBottom","Nav","width","display","verticalAlign","marginRight","to","Main","padding","Alpha","Beta","Sub","margin","Ad","Example","a_name","App","minHeight","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOAMMA,EAAS,SAAAC,GACX,OAAO,yBAAKC,MAAO,CAAEC,OAAO,QAAUC,gBAAgB,iBAAmBC,aAAa,WAKpFC,EAAM,SAAAL,GACX,OAAO,yBAAKC,MAAO,CAAEC,OAAO,QAAUI,MAAM,QAAUH,gBAAgB,YACnEI,QAAQ,eAAiBC,cAAc,MAAQC,YAAY,SAC7D,kBAAC,IAAD,CAAMC,GAAG,KAAI,yCACb,6BAAM,6BACN,kBAAC,IAAD,CAAMA,GAAG,UAAS,0CAClB,6BAAM,6BACN,kBAAC,IAAD,CAAMA,GAAG,SAAQ,2CAMbC,EAAO,SAAAX,GACZ,OAAO,yBAAKC,MAAO,CAAEC,OAAO,QAAUI,MAAM,QAAUH,gBAAgB,UACpEI,QAAQ,eAAiBK,QAAQ,SAElC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QAMIC,EAAQ,SAAAb,GACb,OAAO,yBAAKC,MAAO,CAAEC,OAAO,QAAUI,MAAM,QAAUH,gBAAgB,UACpEI,QAAQ,eAAiBK,QAAQ,SAClC,kBAAC,EAAD,MACA,kBAAC,EAAD,QAMIE,EAAO,SAAAd,GACZ,OAAO,yBAAKC,MAAO,CAAEC,OAAO,QAAUI,MAAM,QAAUH,gBAAgB,UACpEI,QAAQ,eAAiBK,QAAQ,SAClC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QAKIG,EAAM,SAAAf,GACX,OAAO,yBAAKC,MAAO,CAAEC,OAAO,QAAUI,MAAM,QAAUH,gBAAgB,YACnEI,QAAQ,eAAiBC,cAAc,MAAQQ,OAAO,WAIpDC,EAAK,SAAAjB,GACV,OAAO,yBAAKC,MAAO,CAAEC,OAAO,QAAUC,gBAAgB,SAAYa,OAAO,WAIpEE,EAAU,SAAAlB,GACf,OAAO,wBAAIC,MAAO,CAAEE,gBAAgB,aAA7B,8BAAuEH,EAAMmB,OAA7E,MAqBOC,MAjBf,WACE,OACE,yBAAKnB,MAAO,CAAEK,MAAM,SAAWe,UAAU,QAAUlB,gBAAgB,OAASS,QAAQ,SAEnF,kBAAC,EAAD,MACA,kBAAC,EAAD,MACH,kBAAC,IAAD,CAAQX,MAAO,CAAEK,MAAM,QAAUC,QAAQ,iBACrC,kBAAC,EAAD,CAAOe,KAAK,MACf,kBAAC,EAAD,CAAOA,KAAK,UACZ,kBAAC,EAAD,CAAOA,KAAK,SACZ,kBAAC,EAAD,CAASA,KAAK,wBCxEGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9e956696.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Link, Router } from '@reach/router';\n\n\n\nconst Header = props => {\n    return <div style={{ height:\"100px\" , backgroundColor:\"mediumseagreen\" , marginBottom:\"20px\"}}></div>\n}//** Header components***********************************************/\n\n\n\nconst Nav = props => {\n\treturn <div style={{ height:\"300px\" , width:\"200px\" , backgroundColor:\"royalblue\" ,\n    display:\"inline-Block\" , verticalAlign:\"top\" , marginRight:\"20px\"}}>\n\t\t<Link to=\"/\"><button>Home</button></Link>\n\t\t<br /><br />\n\t\t<Link to=\"/alpha\"><button>Alpha</button></Link>\n\t\t<br /><br />\n\t\t<Link to=\"/beta\"><button>Beta</button></Link>\n\t</div>\n}//** Nav components***********************************************/\n\n\n\nconst Main = props => {\n\treturn <div style={{ height:\"500px\" , width:\"700px\" , backgroundColor:\"crimson\" ,\n  \tdisplay:\"inline-block\" , padding:\"10px\"}}>\n\t\t{/* { props.children } */}\n\t\t<Sub />\n\t\t<Sub />\n\t\t<Sub />\n\t\t<Ad />\n\t</div>\n}//** Main components***********************************************/\n\n\n\nconst Alpha = props => {\n\treturn <div style={{ height:\"500px\" , width:\"700px\" , backgroundColor:\"crimson\" ,\n  \tdisplay:\"inline-block\" , padding:\"10px\"}}>\n\t\t<Sub />\n\t\t<Sub />\n\t</div>\n}//** Alpha components***********************************************/\n\n\n\nconst Beta = props => {\n\treturn <div style={{ height:\"500px\" , width:\"700px\" , backgroundColor:\"crimson\" ,\n  \tdisplay:\"inline-block\" , padding:\"10px\"}}>\n\t\t<Ad />\n\t\t<Ad />\n\t\t<Ad />\n\t</div>\n}//** Beta components***********************************************/\n\n\nconst Sub = props => {\n\treturn <div style={{ height:\"212px\" , width:\"212px\" , backgroundColor:\"goldenrod\" ,\n    display:\"inline-Block\" , verticalAlign:\"top\" , margin:\"10px\"}}></div>\n}//** Sub component *************************************************/\n\n\nconst Ad = props => {\n\treturn <div style={{ height:\"150px\" , backgroundColor:\"orchid\" ,  margin:\"10px\"}}></div>\n}//** Ad component ************************************************ */\n\n\nconst Example = props => {\n\treturn <h1 style={{ backgroundColor:\"lavender\"}}>Welcome to Example with -> { props.a_name } </h1>\n}//** Example component **********************************************\n\n\nfunction App() {\n  return (\n    <div style={{ width:\"1000px\" , minHeight:\"500px\" , backgroundColor:\"#eee\" , padding:\"20px\"}}>\n\n    \t<Header />\n    \t<Nav />\n\t\t<Router style={{ width:\"700px\" , display:\"inline-block\" }}>\n    \t\t<Main  path=\"/\" \t/>\n\t\t\t<Alpha path=\"alpha\" />\n\t\t\t<Beta  path=\"beta\" \t/>\n\t\t\t<Example path=\"/example/:a_name\" />\n\t\t</Router>\n\n     </div>\n  );\n}\n\nexport default App;\n\n/* These children where used in <Main> here </Main> in the function App() in the return() \n   up to minute 21 in the video.\n\t\t<Sub />\n\t\t<Sub />\n\t\t<Sub />\n\t\t<Ad /> \n\t</Main> \n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}